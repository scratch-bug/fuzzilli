(async () => {
    const exporter_wasm = new Uint8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x05, 0x01, 0x60, 0x01, 0x7c, 0x00, 0x02, 0x08, 0x01, 0x03, 0x74, 0x61, 0x67, 0x00, 0x00, 0x07, 0x07, 0x01, 0x03, 0x74, 0x61, 0x67, 0x04, 0x00]);
    const importer_wasm = new Uint8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x09, 0x02, 0x60, 0x01, 0x7f, 0x00, 0x60, 0x01, 0x7f, 0x00, 0x02, 0x0b, 0x01, 0x03, 0x65, 0x6e, 0x76, 0x03, 0x74, 0x61, 0x67, 0x04, 0x00, 0x00, 0x03, 0x02, 0x01, 0x01, 0x07, 0x0b, 0x01, 0x07, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x00, 0x01, 0x0a, 0x08, 0x01, 0x06, 0x00, 0x20, 0x00, 0x08, 0x00, 0x0b]);

    let f64_tag;
    let thrower;

    try {
        const exporter_module = await WebAssembly.instantiate(exporter_wasm);
        f64_tag = exporter_module.instance.exports.tag;
        const importer_module = await WebAssembly.instantiate(importer_wasm, {
            env: { tag: f64_tag }
        });
        thrower = importer_module.instance.exports.thrower;
    } catch (e) {
        return;
    }

    let do_trigger = false;
    for (let i = 0; i < 25000; i++) {
        if (i === 24999) {
            do_trigger = true;
        }
        try {
            thrower(do_trigger ? 0x41414141 : 1);
        } catch (e) {
            if (do_trigger && e instanceof WebAssembly.Exception) {
                e.getArg(f64_tag, 0);
            }
        }
    }
})().catch(() => {});